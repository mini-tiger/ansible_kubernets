- name: create repor backup directory
  shell: mkdir -p /etc/yum.repos.d/back
  ignore_errors: yes
  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)


- name: backup repos file
  shell: mv /etc/yum.repos.d/*.repo /etc/yum.repos.d/back
  ignore_errors: yes
  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)
 
- name: copy repo files
  copy:
    src: "{{ item }}"
    dest: /etc/yum.repos.d/
    owner: root
    mode: 600
  with_fileglob:
    - "{{ role_path }}/files/*"
  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)


- name: install createrepo
  yum:
    name:
    - yum-utils
    - wget
    - curl
    update_cache: true
    state: latest
  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)

- name: install nginx
  yum:
    name:
    -  nginx-1.20.2
    state: latest
    disablerepo: "*"
    enablerepo: "nginx"
  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)


- name: Creates repo directory
  ansible.builtin.file:
    path: "{{ repo_dir }}"
    state: directory


- name: repotrack downoad depth(1/3)
  shell: repotrack -p {{ repo_dir }} -a x86_64 libnetfilter_cthelper libnetfilter_cttimeout libnetfilter_queue socat wget container-selinux haproxy keepalived \
         lvm2 conntrack ipset ipvsadm ebtables  conntrack ipvsadm ipset jq sysstat curl iptables libseccomp iptables-devel chrony kubelet kubeadm 
  environment:
    ALL_PROXY: "{{ proxy }}"
  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)

#- name: repotrack downoad keepalived haproxy
#  shell: repotrack -p {{ repo_dir }} haproxy keepalived
#  environment:
#    ALL_PROXY: "{{ proxy }}"
#  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)


- name: repotrack kernel package download (2/3)
  shell: repotrack -r elrepo-kernel  -p {{ repo_dir }} -a x86_64  kernel-lt-* && repotrack  -p {{ repo_dir }} -a x86_64  initscripts && \
        repotrack  -p {{ repo_dir }} -a x86_64  perl-data-dumper
  environment:
    ALL_PROXY: "{{ proxy }}"
  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)

- name: repotrack containerd.io download (3/3)
  shell: repotrack -r docker-ce-stable  -p {{ repo_dir }} -a x86_64  {{ containerd_version }}
  environment:
    ALL_PROXY: "{{ proxy }}"
  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)


- name: yumdownload kubectl kubeadm kubelet
  shell: yumdownloader --resolve --destdir={{ repo_dir }}  kubectl-1.26.9-0 kubeadm-1.26.9-0 kubectl-1.26.9-0
  environment:
    ALL_PROXY: "{{ proxy }}"
  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)


- name: createrepo command 
  shell: createrepo {{ repo_dir }} && createrepo -pd {{ repo_dir }}

- name: nginx config copy
  copy:
    src: "{{ role_path }}/conf/default.conf"
    dest: /etc/nginx/conf.d/default.conf

- name: nginx repo source start
  ansible.builtin.systemd_service:
    name: nginx
    state: started
    enabled: true

- name: Download nerdctl cni 
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "/tmp/{{item.destname}}"
    mode: '0644'
    use_proxy: true
  loop:
     - { url: "https://github.com/containerd/nerdctl/releases/download/v1.7.1/{{ nerdctl_package}}", destname: "{{ nerdctl_package }}" }
     - { url: "https://github.com/containernetworking/plugins/releases/download/v1.3.0/{{ cni_plugin }}", destname: "{{ cni_plugin }}" }
  environment:
    ALL_PROXY: "{{ proxy }}"
  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)


#- name: Download containerd
#  ansible.builtin.get_url:
#    url: "{{ item.url }}"
#    dest: "/tmp/{{item.destname}}"
#    mode: '0644'
#    use_proxy: true
##  loop:
#     - { url: 'https://download.docker.com/linux/centos/7/x86_64/stable/Packages/{{ containerd_rpm }}', destname: "{{ containerd_rpm }}" }
#  environment:
#    ALL_PROXY: "{{ proxy }}"
#  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)

#- name: copy containerd to repo
#  copy:
#    src: "/tmp/{{ containerd_rpm }}"
#    dest: "{{ repo_dir }}/{{ containerd_rpm}}"
#    owner: root
#    mode: 777
#  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)


- name: createrepo -pd
  shell: createrepo -pd {{ repo_dir }}
  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)


# create env-t repo with jinja2
- name: create repo file
  template:
    src: "{{ role_path }}/templates/env-t.repo.j2"
    dest: /tmp/env-t.repo
  when: (hostvars[inventory_hostname].ansible_master | default(0) == 1)
